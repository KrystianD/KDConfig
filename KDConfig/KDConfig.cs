using System;
using System.Collections.Generic;
using System.Reflection;

namespace KDConfig
{
  public class OptionInstance
  {
    public Type FieldType;
    public ConfigValueAttribute Attribute;
    public FieldInfo Field;

    public OptionInstance(Type fieldType, ConfigValueAttribute attribute, FieldInfo field)
    {
      FieldType = fieldType;
      Attribute = attribute;
      Field = field;
    }

    public bool IsRequired => Attribute.Required == RequiredEnum.Required;
    public bool IsOptional => Attribute.Required == RequiredEnum.Optional;
  }

  public class KDConfig
  {
    private static List<OptionInstance> GetClassOptions(Type type)
    {
      var properties = type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
      var fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);

      var options = new List<OptionInstance>();

      foreach (var fieldInfo in fields) {
        var attr = fieldInfo.GetCustomAttribute<ConfigValueAttribute>();
        if (attr == null)
          continue;
        options.Add(new OptionInstance(fieldInfo.FieldType, attr, fieldInfo));
      }

      foreach (var propertyInfo in properties) {
        var attr = propertyInfo.GetCustomAttribute<ConfigValueAttribute>();
        if (attr == null)
          continue;

        var backingField = type.GetField($"<{propertyInfo.Name}>k__BackingField", BindingFlags.Instance | BindingFlags.NonPublic);
        if (backingField == null) {
          throw new Exception("No backing field"); // not autogenerated property
        }

        options.Add(new OptionInstance(backingField.FieldType, attr, backingField));
      }

      return options;
    }

    public static T CreateFrom<T>(IConfigDataProvider provider) where T : new()
    {
      var instance = CreateClassFromProvider("", typeof(T), provider);
      return (T)instance;
    }

    private static object CreateClassFromProvider(string basePath, Type type, IConfigDataProvider provider)
    {
      var instance = Activator.CreateInstance(type)!;
      var options = GetClassOptions(type);

      foreach (var option in options) {
        var path = option.Attribute.Path;
        var fieldType = option.FieldType;

        if (basePath != "")
          path = basePath + "." + path;

        if (ConversionUtils.IsScalarType(fieldType)) {
          var scalarValue = provider.GetScalar(path);

          if (scalarValue is "") {
            if (option.IsRequired) {
              switch (option.Attribute.EmptyHandling) {
                case EmptyHandling.NotAllowed:
                  throw new EmptyValueNotPermittedException();
                case EmptyHandling.AsIs:
                  break;
                case EmptyHandling.AsNull:
                  throw new MissingValueException();
                case EmptyHandling.UseDefaultValue:
                  continue;
              }
            }
            else {
              switch (option.Attribute.EmptyHandling) {
                case EmptyHandling.NotAllowed:
                  throw new EmptyValueNotPermittedException();
                case EmptyHandling.AsIs:
                  break;
                case EmptyHandling.AsNull:
                  if (option.FieldType.IsNullable())
                    option.Field.SetValue(instance, null);
                  else
                    throw new InvalidConversionException();
                  continue;
                case EmptyHandling.UseDefaultValue:
                  continue;
              }
            }
          }

          if (scalarValue is null) {
            if (option.IsRequired)
              throw new MissingValueException();
          }
          else {
            if (provider.IsFixedType) {
              throw new NotImplementedException();
            }
            else {
              if (scalarValue is string scalarValueString) {
                var value = ConversionUtils.ParseStringToType(scalarValueString, fieldType);
                option.Field.SetValue(instance, value);
              }
              else {
                throw new InvalidConversionException();
              }
            }
          }
        }
        else {
          var value = CreateClassFromProvider(path, fieldType, provider);
          option.Field.SetValue(instance, value);
        }
      }

      return instance;
    }
  }
}